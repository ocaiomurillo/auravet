generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Especie {
  CACHORRO
  GATO
  OUTROS
}

enum TipoServico {
  CONSULTA
  EXAME
  VACINACAO
  CIRURGIA
  OUTROS
}

enum AppointmentStatus {
  AGENDADO
  CONFIRMADO
  CONCLUIDO
}

model Owner {
  id        String   @id @default(cuid())
  nome      String
  email     String   @unique
  telefone  String?
  createdAt DateTime @default(now())
  animals   Animal[]
  appointments Appointment[]
}

model Animal {
  id         String    @id @default(cuid())
  nome       String
  especie    Especie
  raca       String?
  nascimento DateTime?
  ownerId    String
  owner      Owner     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  services   Servico[]
  appointments Appointment[]
}

model Servico {
  id           String      @id @default(cuid())
  animalId     String
  animal       Animal      @relation(fields: [animalId], references: [id], onDelete: Cascade)
  tipo         TipoServico
  data         DateTime
  preco        Decimal     @db.Decimal(10, 2)
  observacoes  String?
  createdAt    DateTime    @default(now())
  items        ServiceProductUsage[]
  appointment  Appointment? @relation("AppointmentService")
}

model Module {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       RoleModuleAccess[]
}

model Role {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  modules     RoleModuleAccess[]
}

model RoleModuleAccess {
  roleId    String
  moduleId  String
  isEnabled Boolean  @default(true)

  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([roleId, moduleId])
}

model User {
  id           String   @id @default(cuid())
  nome         String
  email        String   @unique
  passwordHash String
  roleId       String
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id])
  collaboratorProfile CollaboratorProfile?
  appointmentsAsVeterinarian Appointment[] @relation("VeterinarianAppointments")
  appointmentsAsAssistant    Appointment[] @relation("AssistantAppointments")
}

model CollaboratorProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  especialidade String?
  crmv         String?
  turnos       String[] @default([])
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Appointment {
  id               String            @id @default(cuid())
  animalId         String
  ownerId          String
  veterinarianId   String
  assistantId      String?
  serviceId        String?   @unique
  status           AppointmentStatus @default(AGENDADO)
  scheduledStart   DateTime
  scheduledEnd     DateTime
  confirmedAt      DateTime?
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  animal        Animal     @relation(fields: [animalId], references: [id], onDelete: Cascade)
  owner         Owner      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  veterinarian  User       @relation("VeterinarianAppointments", fields: [veterinarianId], references: [id])
  assistant     User?      @relation("AssistantAppointments", fields: [assistantId], references: [id])
  service       Servico?   @relation("AppointmentService", fields: [serviceId], references: [id])
}

model Product {
  id            String   @id @default(cuid())
  nome          String
  descricao     String?
  custo         Decimal  @db.Decimal(10, 2)
  precoVenda    Decimal  @db.Decimal(10, 2)
  estoqueAtual  Int      @default(0)
  estoqueMinimo Int      @default(0)
  isActive      Boolean  @default(true)
  isSellable    Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  serviceUsages ServiceProductUsage[]
}

model ServiceProductUsage {
  id            String   @id @default(cuid())
  servicoId     String
  productId     String
  quantidade    Int
  valorUnitario Decimal  @db.Decimal(10, 2)
  valorTotal    Decimal  @db.Decimal(10, 2)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  servico Servico @relation(fields: [servicoId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([servicoId, productId])
}
