generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Especie {
  CACHORRO
  GATO
  OUTROS
}

enum TipoServico {
  CONSULTA
  EXAME
  VACINACAO
  CIRURGIA
  OUTROS
}

model Owner {
  id        String   @id @default(cuid())
  nome      String
  email     String   @unique
  telefone  String?
  createdAt DateTime @default(now())
  animals   Animal[]
}

model Animal {
  id         String    @id @default(cuid())
  nome       String
  especie    Especie
  raca       String?
  nascimento DateTime?
  ownerId    String
  owner      Owner     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  services   Servico[]
}

model Servico {
  id           String      @id @default(cuid())
  animalId     String
  animal       Animal      @relation(fields: [animalId], references: [id], onDelete: Cascade)
  tipo         TipoServico
  data         DateTime
  preco        Decimal     @db.Decimal(10, 2)
  observacoes  String?
  createdAt    DateTime    @default(now())
}

model Module {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  roles       RoleModuleAccess[]
}

model Role {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
  modules     RoleModuleAccess[]
}

model RoleModuleAccess {
  roleId    String
  moduleId  String
  isEnabled Boolean  @default(true)

  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@id([roleId, moduleId])
}

model User {
  id           String   @id @default(cuid())
  nome         String
  email        String   @unique
  passwordHash String
  roleId       String
  isActive     Boolean  @default(true)
  lastLoginAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id])
}
